#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const { execSync } = require('child_process');
const chalk = require('chalk');

// –ü–∞–∫–µ—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
const devDependencies = [
    'stylelint',
    'stylelint-config-html',
    'stylelint-config-rational-order-fix',
    'stylelint-config-recess-order',
    'stylelint-config-recommended-vue',
    'stylelint-config-standard',
    'stylelint-config-standard-scss',
    'stylelint-config-standard-vue',
    'stylelint-order',
    '@nuxt/eslint',
    '@nuxt/eslint-config',
    'eslint'
];

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
function detectPackageManager() {
    if (fs.existsSync('yarn.lock')) {
        return 'yarn';
    } else if (fs.existsSync('pnpm-lock.yaml')) {
        return 'pnpm';
    } else if (fs.existsSync('bun.lockb')) {
        return 'bun';
    } else {
        return 'npm';
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function installDependencies(packageManager) {
    console.log(chalk.blue('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...'));

    const packageList = devDependencies.join(' ');

    try {
        switch (packageManager) {
            case 'yarn':
                execSync(`yarn add -D ${packageList}`, { stdio: 'inherit' });
                break;
            case 'pnpm':
                execSync(`pnpm add -D ${packageList}`, { stdio: 'inherit' });
                break;
            case 'bun':
                execSync(`bun add -D ${packageList}`, { stdio: 'inherit' });
                break;
            default:
                execSync(`npm install --save-dev ${packageList}`, { stdio: 'inherit' });
        }
        console.log(chalk.green('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!'));
    } catch (error) {
        console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:'), error.message);
        process.exit(1);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ .stylelintignore
function createStylelintIgnore() {
    const content = `##########################
# See more in https://github.com/github/gitignore
##########################

##########################
# Node
##########################
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
.nuxt-storybook
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

##########################
# Linux
##########################
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

*.tar
*.tar.*
*.jar
*.exe
*.msi
*.zip
*.tgz
*.log
*.log.*
*.sig

pkg/

##########################
# MacOS
##########################
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \\r
# Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

##########################
# Windows
##########################
# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

##########################
# VSCode
##########################
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

##########################
# JetBrains
##########################
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm, Rider and Fleet
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# AWS User-specific
.idea/**/aws.xml

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# SonarLint plugin
.idea/sonarlint/

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

# Fleet
.fleet

##########################
# User
##########################
docs-generated
.histoire/
test-results/
playwright-report/
tasks.md
dist-ssr
*.local
/cypress/videos/
/cypress/screenshots/
docs-generated/
.idea
*storybook.log
storybook-static
.output
.data
.nitro
.env-example
!.env-example
.env.*
!.env.example
`;

    fs.writeFileSync('.stylelintignore', content);
    console.log(chalk.green('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .stylelintignore'));
}

// –°–æ–∑–¥–∞–Ω–∏–µ .stylelintrc.json
function createStylelintConfig() {
    const config = {
        "extends": [
            "stylelint-config-rational-order-fix",
            "stylelint-config-html",
            "stylelint-config-standard",
            "stylelint-config-standard-scss",
            "stylelint-config-standard-vue/scss"
        ],
        "plugins": ["stylelint-order", "stylelint-config-rational-order-fix/plugin"],
        "rules": {
            "order/properties-order": [],
            "order/order": [
                "custom-properties",
                "declarations",
                {
                    "type": "at-rule",
                    "name": "include"
                },
                "rules"
            ],
            "plugin/rational-order": [
                true,
                {
                    "border-in-box-model": false,
                    "empty-line-between-groups": true
                }
            ],
            "declaration-empty-line-before": [
                "always",
                { "ignore": ["after-declaration"], "except": ["first-nested"] }
            ],
            "rule-empty-line-before": [
                "always-multi-line",
                { "except": ["first-nested"] }
            ],
            "media-feature-range-notation": "prefix",
            "at-rule-descriptor-value-no-unknown": null,
            "color-hex-length": "long",
            "selector-class-pattern": "\\w+",
            "selector-id-pattern": null,
            "at-rule-no-unknown": null,
            "no-descending-specificity": null,
            "function-no-unknown": null,
            "selector-pseudo-class-no-unknown": null,
            "font-family-no-duplicate-names": null,
            "property-no-unknown": [
                true,
                {
                    "ignoreProperties": ["text-fill-color"]
                }
            ],
            "scss/at-rule-no-unknown": [
                true,
                {
                    "ignoreAtRules": ["tailwind"]
                }
            ]
        }
    };

    fs.writeFileSync('.stylelintrc.json', JSON.stringify(config, null, 2));
    console.log(chalk.green('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .stylelintrc.json'));
}

// –°–æ–∑–¥–∞–Ω–∏–µ eslint.config.mjs
function createEslintConfig() {
    const content = `import { createConfigForNuxt } from '@nuxt/eslint-config';
import withNuxt from './.nuxt/eslint.config.mjs';

export default withNuxt(
  createConfigForNuxt({
    features: {
      stylistic: {
        semi: true,
        quotes: 'single',
        indent: 2,
        commaDangle: 'always-multiline',
        quoteProps: 'as-needed',
        blockSpacing: true,
      },
    },
  }),
  {
    rules: {
      //   Base
      semi: ['error', 'always'],
      quotes: ['error', 'single'],
      'comma-style': ['error', 'last'],
      'object-curly-spacing': ['error', 'always'],
      'no-irregular-whitespace': 'off',

      // Vue
      'vue/multi-word-component-names': 'off',
      'vue/require-default-prop': 'off',
      'vue/attribute-hyphenation': ['error', 'always'],
      'vue/max-attributes-per-line': [
        'error',
        {
          singleline: {
            max: 2,
          },
          multiline: {
            max: 1,
          },
        },
      ],
      'vue/singleline-html-element-content-newline': 'off',
      'vue/attributes-order': [
        'error',
        {
          order: [
            'DEFINITION',
            'LIST_RENDERING',
            'CONDITIONALS',
            'RENDER_MODIFIERS',
            'GLOBAL',
            'UNIQUE',
            'TWO_WAY_BINDING',
            'OTHER_DIRECTIVES',
            'OTHER_ATTR',
            'EVENTS',
            'CONTENT',
          ],
        },
      ],
      'vue/html-closing-bracket-newline': [
        'error',
        {
          singleline: 'never',
          multiline: 'always',
        },
      ],
      'vue/first-attribute-linebreak': [
        'error',
        {
          singleline: 'ignore',
          multiline: 'below',
        },
      ],
      'vue/html-indent': [
        'error',
        2,
        {
          attribute: 1,
          baseIndent: 1,
          closeBracket: 0,
          alignAttributesVertically: true,
        },
      ],
      'vue/html-quotes': ['error', 'double', { avoidEscape: false }],
      'vue/no-duplicate-attributes': [
        'error',
        {
          allowCoexistClass: true,
          allowCoexistStyle: true,
        },
      ],
      'vue/no-multi-spaces': [
        'error',
        {
          ignoreProperties: false,
        },
      ],
      'vue/no-spaces-around-equal-signs-in-attribute': ['error'],
      'vue/v-on-event-hyphenation': [
        'error',
        'always',
        {
          autofix: true,
          ignore: [],
        },
      ],
      'vue/html-self-closing': [
        'error',
        {
          html: {
            void: 'always',
            normal: 'always',
            component: 'always',
          },
          svg: 'always',
          math: 'always',
        },
      ],
      'vue/object-curly-spacing': ['error', 'always'],
      'vue/no-v-html': 'off',
      'vue/mustache-interpolation-spacing': ['error', 'always'],
      'vue/block-order': ['error', {
        order: ['script', 'template', 'style'],
      }],

      // TypeScript
      '@typescript-eslint/ban-ts-comment': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-unused-expressions': [
        'error',
        {
          allowShortCircuit: true,
          allowTernary: true,
          allowTaggedTemplates: true,
        },
      ],
    },
  },
);
`;

    fs.writeFileSync('eslint.config.mjs', content);
    console.log(chalk.green('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª eslint.config.mjs'));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ nuxt.config
function updateNuxtConfig() {
    const configPaths = ['nuxt.config.js', 'nuxt.config.ts', 'nuxt.config.mjs'];
    let configPath = null;

    for (const path of configPaths) {
        if (fs.existsSync(path)) {
            configPath = path;
            break;
        }
    }

    if (!configPath) {
        console.log(chalk.yellow('‚ö†Ô∏è  –§–∞–π–ª nuxt.config –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.'));
        return;
    }

    try {
        let content = fs.readFileSync(configPath, 'utf8');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ @nuxt/eslint –≤ –º–æ–¥—É–ª—è—Ö
        if (content.includes('@nuxt/eslint')) {
            console.log(chalk.yellow('‚ö†Ô∏è  @nuxt/eslint —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ nuxt.config'));
            return;
        }

        // –ò—â–µ–º —Å–µ–∫—Ü–∏—é modules –∏ –¥–æ–±–∞–≤–ª—è–µ–º @nuxt/eslint
        const moduleRegex = /modules\s*:\s*\[([\s\S]*?)\]/;
        const match = content.match(moduleRegex);

        if (match) {
            const modules = match[1].trim();
            const newModules = modules ?
                `${modules},\n    '@nuxt/eslint'` :
                `'@nuxt/eslint'`;

            content = content.replace(moduleRegex, `modules: [\n    ${newModules}\n  ]`);
        } else {
            // –ï—Å–ª–∏ —Å–µ–∫—Ü–∏–∏ modules –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            const exportRegex = /export\s+default\s+defineNuxtConfig\s*\(\s*\{([\s\S]*?)\}\s*\)/;
            const exportMatch = content.match(exportRegex);

            if (exportMatch) {
                const configContent = exportMatch[1].trim();
                const newConfigContent = configContent ?
                    `${configContent},\n  modules: [\n    '@nuxt/eslint'\n  ]` :
                    `modules: [\n    '@nuxt/eslint'\n  ]`;

                content = content.replace(exportRegex,
                    `export default defineNuxtConfig({\n  ${newConfigContent}\n})`
                );
            }
        }

        fs.writeFileSync(configPath, content);
        console.log(chalk.green('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª nuxt.config'));
    } catch (error) {
        console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ nuxt.config:'), error.message);
        console.log(chalk.yellow('‚ö†Ô∏è  –î–æ–±–∞–≤—å—Ç–µ @nuxt/eslint –≤ modules –≤—Ä—É—á–Ω—É—é'));
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log(chalk.blue.bold('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ESLint –∏ Stylelint –¥–ª—è Nuxt –ø—Ä–æ–µ–∫—Ç–∞'));
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Nuxt –ø—Ä–æ–µ–∫—Ç–µ
    if (!fs.existsSync('package.json')) {
        console.error(chalk.red('‚ùå –§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.'));
        process.exit(1);
    }

    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    if (!packageJson.devDependencies?.nuxt && !packageJson.dependencies?.nuxt) {
        console.error(chalk.red('‚ùå Nuxt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ Nuxt –ø—Ä–æ–µ–∫—Ç.'));
        process.exit(1);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    const packageManager = detectPackageManager();
    console.log(chalk.blue(`üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: ${packageManager}`));

    // –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    installDependencies(packageManager);
    createStylelintIgnore();
    createStylelintConfig();
    createEslintConfig();
    updateNuxtConfig();

    console.log('');
    console.log(chalk.green.bold('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'));
    console.log('');
    console.log(chalk.blue('üìù –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:'));
    console.log(chalk.blue('   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã'));
    console.log(chalk.blue('   ‚Ä¢ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .stylelintignore'));
    console.log(chalk.blue('   ‚Ä¢ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .stylelintrc.json'));
    console.log(chalk.blue('   ‚Ä¢ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª eslint.config.mjs'));
    console.log(chalk.blue('   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω nuxt.config (–¥–æ–±–∞–≤–ª–µ–Ω @nuxt/eslint)'));
    console.log('');
    console.log(chalk.yellow('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ package.json —Å–∫—Ä–∏–ø—Ç—ã:'));
    console.log(chalk.yellow('   "lint": "eslint .",'));
    console.log(chalk.yellow('   "lint:fix": "eslint . --fix",'));
    console.log(chalk.yellow('   "lint:style": "stylelint **/*.{css,scss,vue}",'));
    console.log(chalk.yellow('   "lint:style:fix": "stylelint **/*.{css,scss,vue} --fix"'));
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);
