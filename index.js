#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const { execSync } = require('child_process');
const chalk = require('chalk');
const readline = require('readline');

// –ü–∞–∫–µ—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
const devDependencies = [
    'stylelint',
    'stylelint-config-html',
    'stylelint-config-rational-order-fix',
    'stylelint-config-recess-order',
    'stylelint-config-recommended-vue',
    'stylelint-config-standard',
    'stylelint-config-standard-scss',
    'stylelint-config-standard-vue',
    'stylelint-order',
    '@nuxt/eslint',
    '@nuxt/eslint-config',
    'eslint',
    'typescript'
];

// –ü–∞–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å
const conflictingPackages = {
    eslint: [
        'eslint-config-prettier',
        'eslint-plugin-prettier',
        '@typescript-eslint/eslint-plugin',
        '@typescript-eslint/parser',
        'eslint-config-airbnb',
        'eslint-config-standard',
        'eslint-plugin-vue',
        'eslint-plugin-import',
        'eslint-plugin-node',
        'eslint-plugin-promise'
    ],
    stylelint: [
        'stylelint-config-prettier',
        'stylelint-prettier'
    ],
    prettier: [
        'prettier',
        'eslint-config-prettier',
        'eslint-plugin-prettier',
        'stylelint-config-prettier',
        'stylelint-prettier'
    ]
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã prettier
const prettierFiles = [
    '.prettierrc',
    '.prettierrc.json',
    '.prettierrc.js',
    '.prettierrc.cjs',
    '.prettierrc.mjs',
    '.prettierrc.yml',
    '.prettierrc.yaml',
    'prettier.config.js',
    'prettier.config.cjs',
    'prettier.config.mjs',
    '.prettierignore'
];

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
function question(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
function detectPackageManager() {
    if (fs.existsSync('yarn.lock')) {
        return 'yarn';
    } else if (fs.existsSync('pnpm-lock.yaml')) {
        return 'pnpm';
    } else if (fs.existsSync('bun.lockb')) {
        return 'bun';
    } else {
        return 'npm';
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–∫–µ—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
function checkInstalledPackages() {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const allDeps = {
        ...packageJson.dependencies,
        ...packageJson.devDependencies
    };

    const found = {
        eslint: [],
        stylelint: [],
        prettier: []
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º eslint –ø–∞–∫–µ—Ç—ã
    if (allDeps.eslint) {
        found.eslint.push('eslint');
        conflictingPackages.eslint.forEach(pkg => {
            if (allDeps[pkg]) found.eslint.push(pkg);
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º stylelint –ø–∞–∫–µ—Ç—ã
    if (allDeps.stylelint) {
        found.stylelint.push('stylelint');
        conflictingPackages.stylelint.forEach(pkg => {
            if (allDeps[pkg]) found.stylelint.push(pkg);
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º prettier
    conflictingPackages.prettier.forEach(pkg => {
        if (allDeps[pkg]) found.prettier.push(pkg);
    });

    return found;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
function removePackages(packages, packageManager) {
    if (packages.length === 0) return;

    console.log(chalk.blue(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤: ${packages.join(', ')}`));

    const packageList = packages.join(' ');

    try {
        switch (packageManager) {
            case 'yarn':
                execSync(`yarn remove ${packageList}`, { stdio: 'inherit' });
                break;
            case 'pnpm':
                execSync(`pnpm remove ${packageList}`, { stdio: 'inherit' });
                break;
            case 'bun':
                execSync(`bun remove ${packageList}`, { stdio: 'inherit' });
                break;
            default:
                execSync(`npm uninstall ${packageList}`, { stdio: 'inherit' });
        }
        console.log(chalk.green('‚úÖ –ü–∞–∫–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!'));
    } catch (error) {
        console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–æ–≤:'), error.message);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ prettier
function removePrettierConfigs() {
    let removed = [];
    prettierFiles.forEach(file => {
        if (fs.existsSync(file)) {
            try {
                fs.unlinkSync(file);
                removed.push(file);
            } catch (error) {
                console.error(chalk.red(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${file}:`), error.message);
            }
        }
    });

    if (removed.length > 0) {
        console.log(chalk.green(`‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã Prettier: ${removed.join(', ')}`));
    }

    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º package.json –Ω–∞ –Ω–∞–ª–∏—á–∏–µ prettier –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try {
        const packageJsonPath = 'package.json';
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
        
        if (packageJson.prettier) {
            delete packageJson.prettier;
            fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
            console.log(chalk.green('‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Prettier –∏–∑ package.json'));
        }
    } catch (error) {
        console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ package.json:'), error.message);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
async function handleConflictingPackages(installedPackages, packageManager) {
    let packagesToRemove = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ESLint
    if (installedPackages.eslint.length > 0) {
        console.log(chalk.yellow('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã ESLint:'));
        installedPackages.eslint.forEach(pkg => console.log(chalk.yellow(`   ‚Ä¢ ${pkg}`)));
        
        const answer = await question(chalk.cyan('–£–¥–∞–ª–∏—Ç—å –∏—Ö –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ? (y/n): '));
        if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
            packagesToRemove.push(...installedPackages.eslint);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Stylelint
    if (installedPackages.stylelint.length > 0) {
        console.log(chalk.yellow('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã Stylelint:'));
        installedPackages.stylelint.forEach(pkg => console.log(chalk.yellow(`   ‚Ä¢ ${pkg}`)));
        
        const answer = await question(chalk.cyan('–£–¥–∞–ª–∏—Ç—å –∏—Ö –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ? (y/n): '));
        if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
            packagesToRemove.push(...installedPackages.stylelint);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Prettier
    if (installedPackages.prettier.length > 0) {
        console.log(chalk.yellow('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω Prettier:'));
        installedPackages.prettier.forEach(pkg => console.log(chalk.yellow(`   ‚Ä¢ ${pkg}`)));
        console.log(chalk.yellow('   Prettier –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ª–∏–Ω—Ç–µ—Ä–æ–≤.'));
        
        const answer = await question(chalk.cyan('–£–¥–∞–ª–∏—Ç—å Prettier –∏ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é? (y/n): '));
        if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
            packagesToRemove.push(...installedPackages.prettier);
            removePrettierConfigs();
        }
    }

    // –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    if (packagesToRemove.length > 0) {
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        packagesToRemove = [...new Set(packagesToRemove)];
        removePackages(packagesToRemove, packageManager);
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function installDependencies(packageManager) {
    console.log(chalk.blue('\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...'));

    const packageList = devDependencies.join(' ');

    try {
        switch (packageManager) {
            case 'yarn':
                execSync(`yarn add -D ${packageList}`, { stdio: 'inherit' });
                break;
            case 'pnpm':
                execSync(`pnpm add -D ${packageList}`, { stdio: 'inherit' });
                break;
            case 'bun':
                execSync(`bun add -D ${packageList}`, { stdio: 'inherit' });
                break;
            default:
                execSync(`npm install --save-dev ${packageList}`, { stdio: 'inherit' });
        }
        console.log(chalk.green('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!'));
    } catch (error) {
        console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:'), error.message);
        process.exit(1);
    }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤
function copyTemplateFiles() {
    console.log(chalk.blue('\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...'));
    
    const templateDir = path.join(__dirname, 'templates');
    const files = [
        { from: '.stylelintignore', to: '.stylelintignore' },
        { from: '.stylelintrc.json', to: '.stylelintrc.json' },
        { from: 'eslint.config.mjs', to: 'eslint.config.mjs' }
    ];

    files.forEach(file => {
        const sourcePath = path.join(templateDir, file.from);
        const targetPath = file.to;

        try {
            if (fs.existsSync(sourcePath)) {
                fs.copyFileSync(sourcePath, targetPath);
                console.log(chalk.green(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª ${file.to}`));
            } else {
                console.log(chalk.yellow(`‚ö†Ô∏è  –®–∞–±–ª–æ–Ω ${file.from} –Ω–µ –Ω–∞–π–¥–µ–Ω`));
            }
        } catch (error) {
            console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ ${file.from}:`), error.message);
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ nuxt.config
function updateNuxtConfig() {
    const configPaths = ['nuxt.config.js', 'nuxt.config.ts', 'nuxt.config.mjs'];
    let configPath = null;

    for (const path of configPaths) {
        if (fs.existsSync(path)) {
            configPath = path;
            break;
        }
    }

    if (!configPath) {
        console.log(chalk.yellow('‚ö†Ô∏è  –§–∞–π–ª nuxt.config –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.'));
        return;
    }

    try {
        let content = fs.readFileSync(configPath, 'utf8');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ @nuxt/eslint –≤ –º–æ–¥—É–ª—è—Ö
        if (content.includes('@nuxt/eslint')) {
            console.log(chalk.yellow('‚ö†Ô∏è  @nuxt/eslint —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ nuxt.config'));
            return;
        }

        // –ò—â–µ–º —Å–µ–∫—Ü–∏—é modules –∏ –¥–æ–±–∞–≤–ª—è–µ–º @nuxt/eslint
        const moduleRegex = /modules\s*:\s*\[([\s\S]*?)\]/;
        const match = content.match(moduleRegex);

        if (match) {
            const modules = match[1].trim();
            let newModules;

            if (modules) {
                // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –≤ –∫–æ–Ω—Ü–µ –∏ –ø—Ä–æ–±–µ–ª—ã
                const cleanModules = modules.replace(/,\s*$/, '');
                newModules = `${cleanModules},\n    '@nuxt/eslint',`;
            } else {
                newModules = `'@nuxt/eslint',`;
            }

            content = content.replace(moduleRegex, `modules: [\n    ${newModules}\n  ]`);
        } else {
            // –ï—Å–ª–∏ —Å–µ–∫—Ü–∏–∏ modules –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            const exportRegex = /export\s+default\s+defineNuxtConfig\s*\(\s*\{([\s\S]*?)\}\s*\)/;
            const exportMatch = content.match(exportRegex);

            if (exportMatch) {
                const configContent = exportMatch[1].trim();
                const newConfigContent = configContent ?
                    `${configContent},\n  modules: [\n    '@nuxt/eslint',\n  ]` :
                    `modules: [\n    '@nuxt/eslint',\n  ]`;

                content = content.replace(exportRegex,
                    `export default defineNuxtConfig({\n  ${newConfigContent}\n})`
                );
            }
        }

        fs.writeFileSync(configPath, content);
        console.log(chalk.green('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª nuxt.config'));
    } catch (error) {
        console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ nuxt.config:'), error.message);
        console.log(chalk.yellow('‚ö†Ô∏è  –î–æ–±–∞–≤—å—Ç–µ @nuxt/eslint –≤ modules –≤—Ä—É—á–Ω—É—é'));
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ package.json
function updatePackageScripts(sourceDir) {
    try {
        const packageJsonPath = 'package.json';
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

        // –ë–∞–∑–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
        const baseScripts = {
            'lint:fix': `eslint ./${sourceDir} --fix`,
            'lint:style:fix': `stylelint "${sourceDir}/**/*.{css,scss,vue}" --cache --fix`
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ layers
        const hasLayers = fs.existsSync('layers');

        // –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è layers
        const layersScripts = {
            'lint:layers:fix': 'eslint ./layers --fix',
            'lint:layers:style:fix': 'stylelint "layers/**/*.{css,scss,vue}" --cache --fix'
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º scripts –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!packageJson.scripts) {
            packageJson.scripts = {};
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
        Object.assign(packageJson.scripts, baseScripts);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è layers –µ—Å–ª–∏ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (hasLayers) {
            Object.assign(packageJson.scripts, layersScripts);
            console.log(chalk.blue('üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞–ø–∫–∞ layers - –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã'));
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π package.json
        fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
        console.log(chalk.green('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã –≤ package.json'));

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
        console.log(chalk.blue('üìù –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã:'));
        Object.entries(baseScripts).forEach(([key, value]) => {
            console.log(chalk.blue(`   "${key}": "${value}"`));
        });

        if (hasLayers) {
            Object.entries(layersScripts).forEach(([key, value]) => {
                console.log(chalk.blue(`   "${key}": "${value}"`));
            });
        }

    } catch (error) {
        console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤:'), error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏
    const args = process.argv.slice(2);
    const configsOnly = args.includes('-configs') || args.includes('--configs');

    console.log(chalk.blue.bold('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ESLint –∏ Stylelint –¥–ª—è Nuxt –ø—Ä–æ–µ–∫—Ç–∞'));
    
    if (configsOnly) {
        console.log(chalk.cyan('‚öôÔ∏è  –†–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤'));
    }
    
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Nuxt –ø—Ä–æ–µ–∫—Ç–µ
    if (!fs.existsSync('package.json')) {
        console.error(chalk.red('‚ùå –§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.'));
        process.exit(1);
    }

    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    if (!packageJson.devDependencies?.nuxt && !packageJson.dependencies?.nuxt) {
        console.error(chalk.red('‚ùå Nuxt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ Nuxt –ø—Ä–æ–µ–∫—Ç.'));
        process.exit(1);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É (src –∏–ª–∏ app)
    const sourceDir = fs.existsSync('app') ? 'app' : 'src';
    console.log(chalk.blue(`üìÅ –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${sourceDir}`));

    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤ - –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏ –≤—ã—Ö–æ–¥–∏–º
    if (configsOnly) {
        copyTemplateFiles();
        console.log('');
        console.log(chalk.green.bold('üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!'));
        rl.close();
        return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    const packageManager = detectPackageManager();
    console.log(chalk.blue(`üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: ${packageManager}`));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã
    const installedPackages = checkInstalledPackages();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã
    await handleConflictingPackages(installedPackages, packageManager);

    // –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    installDependencies(packageManager);
    copyTemplateFiles();
    updateNuxtConfig();
    updatePackageScripts(sourceDir);

    console.log('');
    console.log(chalk.green.bold('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'));
    console.log('');
    console.log(chalk.blue('üìù –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:'));
    console.log(chalk.blue('   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã'));
    console.log(chalk.blue('   ‚Ä¢ –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–∏–Ω—Ç–µ—Ä–æ–≤'));
    console.log(chalk.blue('   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω nuxt.config (–¥–æ–±–∞–≤–ª–µ–Ω @nuxt/eslint)'));
    console.log(chalk.blue('   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã –≤ package.json'));
    console.log('');
    console.log(chalk.yellow('üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–∏–Ω—Ç–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:'));
    console.log(chalk.yellow(`   npm run lint:fix - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤ ${sourceDir}`));
    console.log(chalk.yellow(`   npm run lint:style:fix - –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –≤ ${sourceDir}`));

    if (fs.existsSync('layers')) {
        console.log(chalk.yellow('   npm run lint:layers:fix - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤ layers'));
        console.log(chalk.yellow('   npm run lint:layers:style:fix - –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –≤ layers'));
    }

    rl.close();
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
    console.error(error);
    rl.close();
    process.exit(1);
});
